Bucket sort
Definition: 
You start by creating a group of 10 arrays we will call buckets they number from 9 to 0. Then you will look into the array and determine the largest number. 
Once you have got the biggest number out of the array you take that number and count the amount of the digits it has. 
 Once you have the total amount of digits you will start sorting the array based of a single digit. 
 You start with last digit of the number sorting every number into the matching bucket based on that number.
 Once all the numbers I the array have been gone through you merge the 10 buckets together and repeat the process. 
 You will do this until you have gone through every digit position in the numbers of the array you are sorting. 
 This was determined earlier by finding the max number. Once every digit has been compared and sorted you will have a sorted array.

Counting Analysis is in the actual code
BucketSort.java

Final total count operation:  8 + 2·bucketCount + 8n + ∑(m_i log m_i)
Where:  n is the number of elements in the array
        bucketCount is the number of bucketes created to sort
        m_i is the number of elements within the bucket

Sudo Code: 
Create 10 empty arrays labeled 9 to 0   O(1) 
Determine the biggest number in the array  O(n)
Count the digits in the max number    O(log n)
For each loop digit spot( starting from the smallest digit to the biggest digit) O(log n)
    Create 10 empty arrays 9 to 0 O(1)
		For each number in array    O(n)
                             Take the current digit of the number O(n)
                             Place the number into the matching array based the digit being compared O(n)
         Merge the numbered arrays together  O(n)
End loop
Return the sorted array 

Time Complexity: Best case O(n) Worst Case O(n log n) 
