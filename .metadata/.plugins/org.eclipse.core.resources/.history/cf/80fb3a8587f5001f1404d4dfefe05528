package appDomain;

import io.FileHandler;
import shapes.Shape;
import utilities.*;

import java.util.Arrays;
import java.util.Comparator;

public class AppDriver {
    public static void main(String[] args) {
        // Parse command-line arguments
        String filePath = null;
        Comparator<Shape> comparator = null;
        SortingFunction sortingMethod = null;

        // Read command-line arguments
        for (String arg : args) {
            if (arg.startsWith("-f") || arg.startsWith("-F")) {
                filePath = arg.substring(2); // Extract filename after "-f"
            } else if (arg.startsWith("-t") || arg.startsWith("-T")) {
                char criteria = arg.charAt(2); // Extract sorting type
                comparator = getComparator(criteria);
            } else if (arg.startsWith("-s") || arg.startsWith("-S")) {
                char sortType = arg.charAt(2); // Extract sorting method
                sortingMethod = getSortingMethod(sortType);
            }
        }

        // Validate inputs
        if (filePath == null || comparator == null || sortingMethod == null) {
            System.out.println("Invalid arguments! Use format:");
            System.out.println("java -jar Sort.jar -ffile_name -tv -sb");
            System.exit(1);
        }

        // Load shapes from file
        Shape[] shapes = FileHandler.loadShapes(filePath);
        if (shapes == null || shapes.length == 0) {
            System.out.println("No shapes loaded from file: " + filePath);
            return;
        }

        // Sort shapes
        testSorting(sortingMethod, shapes, comparator);
    }

    /**
     * Returns the comparator based on sorting type (volume, height, base area).
     */
    private static Comparator<Shape> getComparator(char type) {
        switch (Character.toLowerCase(type)) {
            case 'v': return Comparator.comparingDouble(Shape::getVolume);
            case 'h': return Comparator.comparingDouble(Shape::getHeight);
            case 'a': return Comparator.comparingDouble(Shape::getBaseArea);
            default:
                System.out.println("Invalid sorting type! Use -tv (volume), -th (height), or -ta (base area).");
                System.exit(1);
                return null; // Unreachable but required
        }
    }

    /**
     * Returns the appropriate sorting method based on the selected algorithm.
     */
    private static SortingFunction getSortingMethod(char type) {
        switch (Character.toLowerCase(type)) {
            case 'b': return BubbleSort::sort;
            case 's': return SelectionSort::sort;
            case 'i': return InsertionSort::sort;
            case 'm': return MergeSort::sort;
            case 'q': return QuickSort::sort;
            case 'z': return BucketSort::sort; // Custom algorithm
            default:
                System.out.println("Invalid sorting method! Use -sb, -ss, -si, -sm, -sq, or -sz.");
                System.exit(1);
                return null; // Unreachable but required
        }
    }

    /**
     * Tests sorting, prints execution time, and displays sorted results.
     */
    private static void testSorting(SortingFunction sorter, Shape[] originalShapes, Comparator<Shape> comparator) {
        System.out.println("\nSorting using " + sorter.getClass().getSimpleName() + "...");

        Shape[] shapes = Arrays.copyOf(originalShapes, originalShapes.length);

        long startTime = System.nanoTime();
        sorter.sort(shapes, comparator);
        long endTime = System.nanoTime();

        double duration = (endTime - startTime) / 1_000_000.0;
        
        // Display sorted elements at key positions
        System.out.println("First element is:");
        displayShapeInfo(0, shapes[0]);

        for (int i = 1000; i < shapes.length; i += 1000) {
            displayShapeInfo(i, shapes[i]);
        }

        System.out.println("Last element is:");
        displayShapeInfo(shapes.length - 1, shapes[shapes.length - 1]);
        
        System.out.printf("run time was: %.0f milliseconds\n", duration);
    }

    /**
     * Prints formatted shape information.
     */
    private static void displayShapeInfo(int index, Shape shape) {
        System.out.printf("%d-th element:\t%s\n", index, shape);
    }

    @FunctionalInterface
    interface SortingFunction {
        void sort(Shape[] array, Comparator<Shape> comparator);
    }
}

	
	// TODO Auto-generated method stub

		// refer to demo001 BasicFileIO.java for a simple example on how to
		// read data from a text file

		// refer to demo01 Test.java for an example on how to parse command
		// line arguments and benchmarking tests

		// refer to demo02 Student.java for comparable implementation, and
		// NameCompare.java or GradeCompare for comparator implementations

		// refer to demo02 KittySort.java on how to use a custom sorting
		// algorithm on a list of comparables to sort using either the
		// natural order (comparable) or other orders (comparators)		
	


