package io;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import shapes.Shape;
import shapes.Cone;
import shapes.Pyramid;
import shapes.Cylinder;
import shapes.OctagonalPrism;
import shapes.PentagonalPrism;
import shapes.SquarePrism;
import shapes.TriangularPrism;

/**
 * FileHandler contains methods to interact with the shapes.txt files found in the res folder
 * 
 * @author Nick
 * @version 1.8
 */

public class FileHandler {
	/**
	 * Loads the shapes of a given .txt file to an array of type Shape[]
	 * Requires the desired file path as an argument
	 * 
	 * @param path
	 * @return Shape[] shapeArr
	 */
	public static Shape[] loadShapes(String path)
	{
		
		File inputFile = new File(path);
		Scanner input = null;
		
		try
		{
			input = new Scanner( inputFile );
		}
		catch( FileNotFoundException e )
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		int quantity = input.nextInt();
		Shape[] shapeArr = new Shape[quantity];
		
		// iterating through every line of the file and converting to a Shape object, and adding 
		// the shape object to shapeArr
		for (int i = 0; i < quantity; i++)
		{
			Shape shape = null;
			String name = input.next();	
			switch(name) 
			{
				case "Cylinder":
					shape = new Cylinder(input.nextDouble(), input.nextDouble());
			 		break;
			 	case "Cone":
			 		shape = new Cone(input.nextDouble(), input.nextDouble());
			 		break;
			 	case "Pyramid":
			 		shape = new Pyramid(input.nextDouble(), input.nextDouble());
			 		break;
			 	case "SquarePrism":
			 		shape = new SquarePrism(input.nextDouble(), input.nextDouble());
			 		break;
			 	case "TriangularPrism":
			 		shape = new TriangularPrism(input.nextDouble(), input.nextDouble());
			 		break;
			 	case "PentagonalPrism":
			 		shape = new PentagonalPrism(input.nextDouble(), input.nextDouble());
			 		break;
			 	case "OctagonalPrism":
			 		shape = new OctagonalPrism(input.nextDouble(), input.nextDouble());
			 		break;
			}
			
			shapeArr[i] = shape;
		}
		
		return shapeArr;
	}
}
