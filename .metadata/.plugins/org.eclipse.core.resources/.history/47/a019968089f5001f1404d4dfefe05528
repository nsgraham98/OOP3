package utilities;

import shapes.Shape;
import java.util.Comparator;

/**
 * Merge Sort is a divide-and-conquer algorithm that repeatedly divides the input array into two halves,
 * sorts them, and then merges the sorted halves.
 * 
 * Time Complexity:
 * - Worst Case: O(n log n)
 * Space Complexity: O(n) 
 * - Recursive implementation
 * 
 * To call them in the driver class
 * -MergeSort.sort(shapes, comparator);
 * 
 * @author Ahmad, Shawn
 * @version 1.8
 */ 
public class MergeSort {
    public static void sort(Shape[] arr, Comparator<Shape> comparator) {
        if (arr == null || arr.length <= 1) return;
        mergeSort(arr, 0, arr.length - 1, comparator);
    }

    private static void mergeSort(Shape[] arr, int left, int right, Comparator<Shape> comparator) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSort(arr, left, mid, comparator);
            mergeSort(arr, mid + 1, right, comparator);
            merge(arr, left, mid, right, comparator);
        }
    }

    private static void merge(Shape[] arr, int left, int mid, int right, Comparator<Shape> comparator) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        Shape[] leftArray = new Shape[n1];
        Shape[] rightArray = new Shape[n2];

        System.arraycopy(arr, left, leftArray, 0, n1);
        System.arraycopy(arr, mid + 1, rightArray, 0, n2);

        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            // Descending order (larger first)
            if (comparator.compare(leftArray[i], rightArray[j]) > 0) {
                arr[k++] = leftArray[i++];
            } else {
                arr[k++] = rightArray[j++];
            }
        }

        while (i < n1) arr[k++] = leftArray[i++];
        while (j < n2) arr[k++] = rightArray[j++];
    }
}

